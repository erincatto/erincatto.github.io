<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>collision on Box2D</title>
    <link>https://box2d.org/tags/collision/</link>
    <description>Recent content in collision on Box2D</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 21 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://box2d.org/tags/collision/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ghost Collisions</title>
      <link>https://box2d.org/posts/2020/06/ghost-collisions/</link>
      <pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://box2d.org/posts/2020/06/ghost-collisions/</guid>
      <description>Dealing with ghost collisions is a challenging problem in game physics. The basic idea comes from motion across a flat surface. You may have several shapes joined together to make a flat surface, like a triangle mesh in 3D or a chain of edges in 2D. Convex shapes can hit the internal connections and have their motion blocked. This is undesirable, we would rather have the convex shape move smoothly across the surface.</description>
    </item>
    
    <item>
      <title>Stuck Inside</title>
      <link>https://box2d.org/posts/2020/04/stuck-inside/</link>
      <pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://box2d.org/posts/2020/04/stuck-inside/</guid>
      <description>There a several computational geometry algorithms that are relevant for preparing collision data: convex hull, mesh simplification, and convex decomposition.
Many implementations of these algorithms are developed outside the specific context of rigid body simulation. For example, qhull computes convex hulls and appears to be application agnostic. Simplygon is focused on simplifying render mesh.
On the other hand, convex decomposition algorithms such as V-HACD are developed with physics simulation in mind.</description>
    </item>
    
    <item>
      <title>Balancing Dynamic Trees</title>
      <link>https://box2d.org/posts/2014/08/balancing-dynamic-trees/</link>
      <pubDate>Thu, 07 Aug 2014 09:36:34 +0000</pubDate>
      
      <guid>https://box2d.org/posts/2014/08/balancing-dynamic-trees/</guid>
      <description>I received this question on LinkedIn:
I&#39;m working on a 3d dynamic aabb tree based on the concepts of Presson&#39;s bullet contribution. I came across a bullet forum thread in which Dirk recommended looking at your box2d implementation. I noticed the major difference is that box2d is a balanced tree using a surface area heuristic while bullet&#39;s is unbalanced with manhattan distance heuristic.
My guess is that keeping your tree balanced resulted in increased maintenance overhead but decreased tree query times.</description>
    </item>
    
    <item>
      <title>Troublesome Triangle</title>
      <link>https://box2d.org/posts/2014/01/troublesome-triangle/</link>
      <pubDate>Fri, 31 Jan 2014 16:50:09 +0000</pubDate>
      
      <guid>https://box2d.org/posts/2014/01/troublesome-triangle/</guid>
      <description>I ran into a problem computing a polygon normal using Newell&#39;s method as described in Christer Ericson&#39;s excellent book Real-Time Collision Detection. In this case the polygon happens to a be a triangle that is close to the origin. So I would guess that Newell&#39;s method would yield a great result. However, this is not true. I only get 2 digits of accuracy in single precision.
Here is the triangle:</description>
    </item>
    
  </channel>
</rss>